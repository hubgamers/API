name: Deploy Spring Boot App with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set execute permissions for mvnw
        run: chmod +x mvnw

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build Spring Boot application and generate JAR
        run: ./mvnw clean package -DskipTests=true
        working-directory: ./  # Adjust this path if your pom.xml is in a subdirectory

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          
      - name: Generate docker-compose.yml with secrets using sed
        run: |
          sed -e "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" \
              -e "s|\${CLOUDINARY_URL}|${{ secrets.CLOUDINARY_URL }}|g" \
              -e "s|\${STRIPE_API_KEY}|${{ secrets.STRIPE_API_KEY }}|g" \
              -e "s|\${STRIPE_WEBHOOK_SECRET}|${{ secrets.STRIPE_WEBHOOK_SECRET }}|g" \
              -e "s|\${STRIPE_ENDPOINT_SECRET}|${{ secrets.STRIPE_ENDPOINT_SECRET }}|g" \
              -e "s|\${STRIPE_DOMAIN}|${{ secrets.STRIPE_DOMAIN }}|g" \
              -e "s|\${APP_DOMAIN}|${{ secrets.APP_DOMAIN }}|g" \
              -e "s|\${APP_ADMIN_EMAIL}|${{ secrets.APP_ADMIN_EMAIL }}|g" \
              -e "s|\${APP_ADMIN_PASSWORD}|${{ secrets.APP_ADMIN_PASSWORD }}|g" \
              -e "s|\${APP_ADMIN_USERNAME}|${{ secrets.APP_ADMIN_USERNAME }}|g" \
              -e "s|\${SPRING_DATASOURCE_URL}|${{ secrets.SPRING_DATASOURCE_URL }}|g" \
              -e "s|\${SPRING_DATASOURCE_USERNAME}|${{ secrets.SPRING_DATASOURCE_USERNAME }}|g" \
              -e "s|\${SPRING_DATASOURCE_PASSWORD}|${{ secrets.SPRING_DATASOURCE_PASSWORD }}|g" \
              docker/docker-compose-prod.yml > docker/docker-compose.yml

          
      - name: Copy Dockerfile to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "docker/Dockerfile"
          target: "/home/root"

      - name: Copy JAR file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "target/hubgamers-0.0.1-SNAPSHOT.jar"  # Adjust the path to match your generated JAR name
          target: "/home/root/docker"

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "docker/docker-compose.yml"
          target: "/home/root"

      - name: Install Docker Compose and deploy
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
            docker-compose -f /home/root/docker/docker-compose.yml pull
            docker-compose -f /home/root/docker/docker-compose.yml down
            docker-compose -f /home/root/docker/docker-compose.yml up -d
